# requirements.txt for Cloud Deployment
streamlit>=1.28.0
pandas>=2.1.0
plotly>=5.17.0
requests>=2.31.0

# Database connectors (optional - install only what you need)
cx-Oracle>=8.3.0
PyMySQL>=1.1.0
pyodbc>=4.0.0

# System monitoring (may not work in all cloud environments)
psutil>=5.9.0

# Additional utilities
python-dateutil>=2.8.0
numpy>=1.24.0

---

# .streamlit/secrets.toml (Local development)
# For Streamlit Cloud, add these in the app dashboard secrets section

[databases]

[[databases]]
name = "production_oracle"
type = "oracle"
host = "oracle-prod.company.com"
port = 1521
database = "PROD"
username = "monitor_user"
password = "your_oracle_password_here"
environment = "production"
enabled = true

[[databases]]
name = "analytics_mysql"
type = "mysql"
host = "mysql-analytics.company.com"
port = 3306
database = "analytics"
username = "monitor_user"
password = "your_mysql_password_here"
environment = "production"
enabled = true

[[databases]]
name = "reporting_sqlserver"
type = "sqlserver"
host = "sqlserver-reporting.company.com"
port = 1433
database = "Reporting"
username = "monitor_user"
password = "your_sqlserver_password_here"
environment = "production"
enabled = true

[[databases]]
name = "staging_mysql"
type = "mysql"
host = "mysql-staging.company.com"
port = 3306
database = "staging"
username = "monitor_user"
password = "your_staging_password_here"
environment = "staging"
enabled = false

# Additional configuration
[app_config]
default_refresh_interval = 300
max_historical_days = 7
enable_auto_refresh = true

---

# .streamlit/config.toml
[theme]
primaryColor = "#FF6B6B"
backgroundColor = "#FFFFFF"
secondaryBackgroundColor = "#F0F2F6"
textColor = "#262730"
font = "sans serif"

[server]
headless = true
port = 8501
enableCORS = false
enableXsrfProtection = true

[browser]
gatherUsageStats = false

---

# packages.txt (for Streamlit Cloud Linux package dependencies)
# Add any system packages required for database drivers

# For Oracle cx_Oracle
libaio1
unixodbc-dev

# For SQL Server pyodbc
unixodbc-dev
freetds-dev

# For general database connectivity
libpq-dev

---

# Dockerfile (if deploying to Docker-based cloud platforms)
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    unixodbc-dev \
    freetds-dev \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Oracle Instant Client (if needed)
# RUN curl -o instantclient-basiclite.zip \
#     https://download.oracle.com/otn_software/linux/instantclient/instantclient-basiclite-linuxx64.zip \
#     && unzip instantclient-basiclite.zip \
#     && mv instantclient_* /opt/oracle \
#     && rm instantclient-basiclite.zip

# ENV LD_LIBRARY_PATH=/opt/oracle:$LD_LIBRARY_PATH

# Copy requirements and install Python packages
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application files
COPY integrated_streamlit_app.py .
COPY ebfd.py .

# Expose port
EXPOSE 8501

# Health check
HEALTHCHECK CMD curl --fail http://localhost:8501/_stcore/health

# Run Streamlit
CMD ["streamlit", "run", "integrated_streamlit_app.py", "--server.port=8501", "--server.address=0.0.0.0"]

---

# heroku.yml (for Heroku deployment)
build:
  docker:
    web: Dockerfile
release:
  image: web
run:
  web: streamlit run integrated_streamlit_app.py --server.port=$PORT --server.address=0.0.0.0

---

# railway.yml (for Railway deployment)
build:
  builder: dockerfile
deploy:
  restartPolicyType: always
  healthcheckPath: /_stcore/health
  healthcheckTimeout: 300

---

# render.yaml (for Render deployment)
services:
  - type: web
    name: database-migration-analyzer
    env: python
    plan: starter
    buildCommand: pip install -r requirements.txt
    startCommand: streamlit run integrated_streamlit_app.py --server.port=$PORT --server.address=0.0.0.0
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.0

---

# fly.toml (for Fly.io deployment)
app = "database-migration-analyzer"
primary_region = "sea"

[env]
  PORT = "8501"

[http_service]
  internal_port = 8501
  force_https = true
  auto_stop_machines = true
  auto_start_machines = true
  min_machines_running = 0

[[vm]]
  cpu_kind = "shared"
  cpus = 1
  memory_mb = 1024

---

# github-actions-deploy.yml (GitHub Actions for cloud deployment)
name: Deploy to Streamlit Cloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test application
      run: |
        python -c "import streamlit; print('Streamlit installed successfully')"
        # Add more tests as needed
    
    - name: Deploy to Streamlit Cloud
      # This would typically involve API calls to Streamlit Cloud
      # or pushing to a deployment branch
      run: |
        echo "Deploying to Streamlit Cloud..."
        # Add actual deployment commands

---

# azure-deploy.yml (Azure Container Apps deployment)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database-migration-analyzer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database-migration-analyzer
  template:
    metadata:
      labels:
        app: database-migration-analyzer
    spec:
      containers:
      - name: streamlit-app
        image: your-registry/database-migration-analyzer:latest
        ports:
        - containerPort: 8501
        env:
        - name: PORT
          value: "8501"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

---

# docker-compose.cloud.yml (Multi-container cloud deployment)
version: '3.8'

services:
  streamlit-app:
    build: .
    ports:
      - "8501:8501"
    environment:
      - PORT=8501
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

---

# setup-cloud.py (Setup script for cloud deployment)
#!/usr/bin/env python3
"""
Setup script for cloud deployment of Database Migration Analyzer
"""

import os
import sys
import json
import subprocess
import argparse

def check_requirements():
    """Check if all required files exist"""
    required_files = [
        'integrated_streamlit_app.py',
        'requirements.txt',
        '.streamlit/secrets.toml'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"❌ Missing required files: {', '.join(missing_files)}")
        return False
    
    print("✅ All required files present")
    return True

def validate_secrets():
    """Validate secrets configuration"""
    try:
        import toml
        with open('.streamlit/secrets.toml', 'r') as f:
            secrets = toml.load(f)
        
        if 'databases' not in secrets:
            print("❌ No databases configured in secrets")
            return False
        
        print(f"✅ Found {len(secrets['databases'])} database configurations")
        return True
        
    except Exception as e:
        print(f"❌ Error validating secrets: {e}")
        return False

def test_imports():
    """Test critical imports"""
    try:
        import streamlit
        import pandas
        import plotly
        print("✅ Core packages import successfully")
        
        # Test database connectors
        connectors = []
        try:
            import cx_Oracle
            connectors.append("Oracle")
        except ImportError:
            pass
        
        try:
            import pymysql
            connectors.append("MySQL")
        except ImportError:
            pass
        
        try:
            import pyodbc
            connectors.append("SQL Server")
        except ImportError:
            pass
        
        if connectors:
            print(f"✅ Database connectors available: {', '.join(connectors)}")
        else:
            print("⚠️ No database connectors available")
        
        return True
        
    except ImportError as e:
        print(f"❌ Import error: {e}")
        return False

def generate_deployment_config(platform):
    """Generate deployment configuration for specific platform"""
    
    configs = {
        'streamlit-cloud': {
            'files': ['.streamlit/secrets.toml', 'requirements.txt'],
            'instructions': [
                "1. Push code to GitHub repository",
                "2. Connect repository to Streamlit Cloud",
                "3. Add secrets in Streamlit Cloud dashboard",
                "4. Deploy application"
            ]
        },
        'heroku': {
            'files': ['heroku.yml', 'requirements.txt'],
            'instructions': [
                "1. Install Heroku CLI",
                "2. heroku create your-app-name",
                "3. git push heroku main",
                "4. Configure environment variables"
            ]
        },
        'docker': {
            'files': ['Dockerfile', 'docker-compose.cloud.yml'],
            'instructions': [
                "1. docker build -t database-migration-analyzer .",
                "2. docker run -p 8501:8501 database-migration-analyzer",
                "3. Access at http://localhost:8501"
            ]
        }
    }
    
    if platform in configs:
        config = configs[platform]
        print(f"\n📋 Deployment Configuration for {platform.title()}:")
        print(f"Required files: {', '.join(config['files'])}")
        print("\nDeployment steps:")
        for instruction in config['instructions']:
            print(f"  {instruction}")
    else:
        print(f"❌ Unknown platform: {platform}")

def main():
    parser = argparse.ArgumentParser(description='Setup Database Migration Analyzer for cloud deployment')
    parser.add_argument('--platform', choices=['streamlit-cloud', 'heroku', 'docker'], 
                       help='Target deployment platform')
    parser.add_argument('--check', action='store_true', help='Check deployment readiness')
    
    args = parser.parse_args()
    
    if args.check:
        print("🔍 Checking deployment readiness...")
        
        checks = [
            check_requirements(),
            validate_secrets(),
            test_imports()
        ]
        
        if all(checks):
            print("\n✅ Ready for cloud deployment!")
        else:
            print("\n❌ Please fix the issues above before deploying")
            sys.exit(1)
    
    if args.platform:
        generate_deployment_config(args.platform)

if __name__ == "__main__":
    main()